import numpy as np
import scipy.stats as stats

# 예시 데이터
data = np.array([25, 28, 30, 27, 26, 23, 24, 26, 25])

# 기준 값
mean_reference = 22

# 일표본 t-검정
t_statistic, p_value = stats.ttest_1samp(data, mean_reference)

print(f"t-통계량: {t_statistic}")

import numpy as np
import scipy.stats as stats

# 예시 데이터 생성
group1 = np.array([25, 28, 30, 27, 26])
group2 = np.array([22, 24, 26, 23, 25])

# 독립표본 t-검정
t_statistic, p_value = stats.ttest_ind(group1, group2)

print(f"t-통계량: {t_statistic}")

import numpy as np
import scipy.stats as stats

# 대응표본 데이터

before = np.array([15, 18, 20, 17, 16]) #약 투여 전
after = np.array([12, 16, 19, 14, 13]) #약 투여 후

# 대응표본 t-검정
t_statistic, p_value = stats.ttest_rel(before, after)

print(f"t-통계량: {t_statistic}")

import numpy as np
import pandas as pd
import scipy.stats as stats

# 예시 데이터
data = pd.DataFrame({
    'Variable1': ['A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'C'],
    'Variable2': ['X', 'Y', 'X', 'X', 'Y', 'Y', 'X', 'Y', 'Y']})

# 카이제곱 검정
observed_freq = pd.crosstab(data['Variable1'], data['Variable2'])
chi2_stat, p_value, _, _ = stats.chi2_contingency(observed_freq)

print(f"카이제곱 통계량: {chi2_stat}")

import pandas as pd
import scipy.stats as stats

# 예시 데이터
data = pd.DataFrame({
    'Group': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C'],
    'Category': ['X', 'X', 'Y', 'X', 'Y', 'Y', 'Y', 'Y', 'Y']
})

# 동질성 검정
observed_freq = pd.crosstab(data['Group'], data['Category'])
chi2_stat, p_value, _, _ = stats.chi2_contingency(observed_freq)

print(f"카이제곱 통계량: {chi2_stat}")
print(f"p-값: {p_value}")

import pandas as pd
import scipy.stats as stats

# 예시 데이터
data = pd.DataFrame({
    'Category': ['A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'C']
})

# 기대 분포
expected_freq = {'A': 0.4, 'B': 0.3, 'C': 0.3}

# 적합성 검정
observed_freq = data['Category'].value_counts()
total_observed = observed_freq.sum()
expected_freq_adj = {category: freq * total_observed for category, freq in expected_freq.items()}

chi2_stat, p_value = stats.chisquare(observed_freq, list(expected_freq_adj.values()))

print(f"카이제곱 통계량: {chi2_stat}")
print(f"p-값: {p_value}")

import numpy as np
from scipy.stats import wilcoxon

#데이터 생성
before = np.array([3, 4, 6, 7, 9]) # 투약 전 약효과
after = np.array([2, 5, 4, 8, 7]) # 투약 후 약효과

# Wilcoxon signed rank test 수행
statistic, p_value = wilcoxon(before, after)

print("통계량:", statistic)
print("p-값 (p-value):", p_value)

import numpy as np
from scipy.stats import mannwhitneyu

# 데이터 생성
group1 = np.array([15, 12, 18, 20, 16])
group2 = np.array([10, 8, 13, 11, 9])

# Wilcoxon 순위 합 검정 수행
statistic, p_value = mannwhitneyu(group1, group2)

print("통계량:", statistic)
print("p-값 (p-value):", p_value)

import numpy as np
from scipy.stats import kruskal

# 데이터 생성
group1 = np.array([4, 6, 8, 5, 7])
group2 = np.array([9, 12, 11, 10, 14])
group3 = np.array([3, 2, 1, 6, 5])

# 크루스칼-왈리스 검정 수행
statistic, p_value = kruskal(group1, group2, group3)

print("통계량 :", statistic)
print("p-값 (p-value):", p_value)


import pandas as pd
from scipy.stats import ttest_ind

df = pd.read_csv('titanic.csv')

# Separate the age values for survivors and non-survivors
age_survived = df[df['Survived'] == 1]['Age'].dropna()
age_not_survived = df[df['Survived'] == 0]['Age'].dropna()

mean_survived = age_survived.mean()
mean_not_survived = age_not_survived.mean()

age_difference = mean_survived - mean_not_survived

print(round(age_difference,2))

t_stat, p_value = ttest_ind(age_survived, age_not_survived)

t_stat = round(t_stat, 4)

print(t_stat)

p_value = round(p_value, 4)

print(p_value)

import pandas as pd
from scipy.stats import chi2_contingency

df = pd.read_csv('titanic.csv')

# 객실 등급별 생존 여부 교차표 생성
cross_tab = pd.crosstab(df['Pclass'], df['Survived'])

# 객실 등급별 생존율 계산
rate = cross_tab[1] / (cross_tab[0] + cross_tab[1])

print(rate)



# 카이제곱 검정 수행
chi2_stat, p_value, _, _ = chi2_contingency(cross_tab)

# 카이제곱 검정 통계량 값을 소수 넷째 자리까지 반올림하여 출력
chi2_stat = round(chi2_stat, 2)
print(chi2_stat)


print(p_value)

import pandas as pd
from scipy.stats import chi2_contingency

# 타이타닉 데이터셋 불러오기
df = pd.read_csv('titanic.csv')

age_std_by_sex = df.groupby('Sex')['Age'].std()
age_std_by_sex

# 생존 여부의 분포 계산
observed_counts = df['Survived'].value_counts()

expected_counts = [len(df) * 0.5, len(df) * 0.5]

# 교차표 생성
observed = pd.DataFrame(observed_counts)
expected = pd.DataFrame(expected_counts)
cross_tab = pd.concat([observed, expected], axis=1)

# 적합성 검정 수행
chi2_stat, p_value, _, _ = chi2_contingency(cross_tab)
chi2_stat = round(chi2_stat, 4)

print(chi2_stat)

print(p_value)

import pandas as pd
from scipy.stats import f_oneway

df = pd.read_csv('mtcars.csv')

group1 = df[df['cyl'] == 4]['mpg']
group2 = df[df['cyl'] == 6]['mpg']
group3 = df[df['cyl'] == 8]['mpg']

mean_group1 = round(group1.mean(), 2)
mean_group2 = round(group2.mean(), 2)
mean_group3 = round(group3.mean(), 2)

print(mean_group1,mean_group2,mean_group3)

# 분산분석 수행
f_statistic, p_value = f_oneway(group1, group2, group3)

print(round(f_statistic,4))

print(p_value)

import pandas as pd
from scipy.stats import mannwhitneyu

df = pd.read_csv('mtcars.csv')

group1 = df[df['vs'] == 0]['hp']
group2 = df[df['vs'] == 1]['hp']

max_group1 = group1.max()
max_group2 = group2.max()

max_hp_difference = max_group1 - max_group2

print( max_hp_difference)

from scipy.stats import mannwhitneyu

statistic, p_value = mannwhitneyu(group1, group2, alternative='two-sided')

print(statistic)

print(p_value)
